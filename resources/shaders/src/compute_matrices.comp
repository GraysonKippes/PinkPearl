#version 460

// This compute shader takes in an array of vectors (representing positions),
// and creates translation matrices. Then each matrix is multiplied by the camera
// and projection matrices, and push to an output buffer.

#define NUM_QUADS 256

layout(local_size_x = NUM_QUADS) in;

// Keeps track of current and previous vectors for interpolation.
struct RenderVector {
	vec4 current;
	vec4 previous;
};

struct RenderTransform {
	RenderVector translation;
	RenderVector scaling;
	RenderVector rotation;
};

struct ProjectionBounds {
	float left;
	float right;
	float bottom;
	float top;
	float near;
	float far;
};

layout(std140, binding = 0) readonly uniform uniform_data_t {
	ProjectionBounds projectionBounds;
	float deltaTime;
	vec4 cameraPosition;
	RenderTransform transforms[NUM_QUADS];
} uniform_data;

layout(std140, binding = 1) writeonly buffer output_buffer {
	mat4 viewMatrix;				// View (camera) matrix, transforms from world space to view (camera) space.
	mat4 projectionMatrix;			// Projection matrix, transforms from view space to clip space.
	mat4 modelMatrices[NUM_QUADS];	// Model matrices, transform from local space to world space.
} output_data;

vec4 vec4Lerp(const RenderVector vector, const float deltaTime) {
	return vec4(
		mix(vector.previous.x, vector.current.x, deltaTime),
		mix(vector.previous.y, vector.current.y, deltaTime),
		mix(vector.previous.z, vector.current.z, deltaTime),
		mix(vector.previous.w, vector.current.w, deltaTime)
	);
}

mat4 makeTranslationMat4(const vec4 position) {
	return mat4(
		1.0, 0.0, 0.0, 0.0,
		0.0, 1.0, 0.0, 0.0,
		0.0, 0.0, 1.0, 0.0,
		position.xyz,  1.0
	);
}

// Computes a view matrix given a camera position.
mat4 makeViewMatrix(const vec4 cameraPosition) {
	return mat4(
		1.0, 0.0, 0.0, 0.0,
		0.0, 1.0, 0.0, 0.0,
		0.0, 0.0, 1.0, 0.0,
		-cameraPosition.xyz, 1.0
	);
}

// Makes and returns an orthographic projection matrix.
// TODO - make this just take width, height, length, etc., instead of bounds.
mat4 make_orthographic_projection_matrix(ProjectionBounds bounds) {
	
	const float zoomFactor = 1.0;
	
	const float scaleX = (2.0 * zoomFactor) / (bounds.right - bounds.left);
	const float scaleY = -(2.0 * zoomFactor) / (bounds.bottom - bounds.top);
	const float scaleZ = -(2.0 * zoomFactor) / (bounds.far - bounds.near);

	const float midX = (bounds.right + bounds.left) / (bounds.right - bounds.left);
	const float midY = (bounds.top + bounds.bottom) / (bounds.top - bounds.bottom);
	const float midZ = (bounds.far + bounds.near) / (bounds.far - bounds.near);

	return mat4(
		scaleX, 0.0, 0.0, 0.0,
		0.0, scaleY, 0.0, 0.0,
		0.0, 0.0, scaleZ, 0.0,
		-midX, -midY, -midZ, 1.0
	);
}

void main() {

	const uint quadID = gl_LocalInvocationID.x;
	
	output_data.modelMatrices[quadID] = makeTranslationMat4(vec4Lerp(uniform_data.transforms[quadID].translation, uniform_data.deltaTime));
	
	output_data.viewMatrix = makeViewMatrix(uniform_data.cameraPosition);
	
	output_data.projectionMatrix = make_orthographic_projection_matrix(uniform_data.projectionBounds);
}
