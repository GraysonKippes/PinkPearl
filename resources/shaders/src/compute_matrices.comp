#version 460

// This compute shader takes in an array of vectors (representing positions),
// and creates translation matrices. Then each matrix is multiplied by the camera
// and projection matrices, and push to an output buffer.

#define NUM_MODELS 64

layout(local_size_x = NUM_MODELS) in;

struct render_position_t {
	vec4 current;
	vec4 previous;
};

struct projection_bounds_t {
	float left;
	float right;
	float bottom;
	float top;
	float near;
	float far;
};

layout(std140, binding = 0) readonly uniform uniform_data_t {
	projection_bounds_t projection_bounds;
	float delta_time;
	vec3 camera_position;
	render_position_t model_positions[NUM_MODELS];
} uniform_data;

layout(std140, binding = 1) writeonly buffer output_buffer {
	mat4 camera_matrix;
	mat4 projection_matrix;
	mat4 model_matrices[NUM_MODELS];
} output_data;

mat4 make_translation_matrix(vec3 translation) {
	mat4 translation_matrix = mat4(1.0);
	translation_matrix[3].xyz = translation;
	return translation_matrix;
}

// Makes and returns a "translerp" (portmanteau of "translate" and "lerp") matrix.
mat4 make_translerp_matrix(render_position_t position, float delta_time) {

	vec3 lerp_position = vec3(
		mix(position.previous.x, position.current.x, delta_time),
		mix(position.previous.y, position.current.y, delta_time),
		mix(position.previous.z, position.current.z, delta_time)
	);
	
	mat4 translation_matrix = mat4(1.0);
	translation_matrix[3].xyz = lerp_position;
	translation_matrix[3].y *= -1.0;
	return translation_matrix;
}

// Makes and returns an orthographic projection matrix.
// TODO - make this just take width, height, length, etc., instead of bounds.
mat4 make_orthographic_projection_matrix(projection_bounds_t bounds) {
	
	const float zoom_factor = 1.0;
	
	const float scale_x = (2.0 * zoom_factor) / (bounds.right - bounds.left);
	const float scale_y = (2.0 * zoom_factor) / (bounds.bottom - bounds.top);
	const float scale_z = -(2.0 * zoom_factor) / (bounds.far - bounds.near);

	const float mid_x = (bounds.right + bounds.left) / (bounds.right - bounds.left);
	const float mid_y = (bounds.top + bounds.bottom) / (bounds.top - bounds.bottom);
	const float mid_z = (bounds.far + bounds.near) / (bounds.far - bounds.near);

	mat4 projection_matrix;
	projection_matrix[0] = vec4(scale_x, 0.0, 0.0, 0.0);
	projection_matrix[1] = vec4(0.0, scale_y, 0.0, 0.0);
	projection_matrix[2] = vec4(0.0, 0.0, scale_z, 0.0);
	projection_matrix[3] = vec4(-mid_x, -mid_y, -mid_z, 1.0);

	return projection_matrix;
}

void main() {
	const uint model_slot = gl_LocalInvocationID.x;
	output_data.camera_matrix = make_translation_matrix(uniform_data.camera_position);
	output_data.projection_matrix = make_orthographic_projection_matrix(uniform_data.projection_bounds);
	output_data.model_matrices[model_slot] = make_translerp_matrix(uniform_data.model_positions[model_slot], uniform_data.delta_time);
}
