#version 450

// Generates a quad for each room in an area.
// Let gl_NumWorkGroups.x equal the number of rooms in the area whose mesh is being generated.
// Let gl_WorkGroupID.x equal the index of the room currently being processed.

#define MAX_AREA_EXTENT_X 	32
#define MAX_AREA_EXTENT_Y 	32
#define NUM_VERTICES_PER_ROOM	4
#define NUM_INDICES_PER_ROOM	6

layout(local_size_x = NUM_VERTICES_PER_ROOM) in;
layout(local_size_y = 1) in;
layout(local_size_z = 1) in;

layout(std140, set = 0, binding = 0) readonly uniform area_data_t {
	uvec2 room_extent;
	ivec2 room_positions[MAX_AREA_EXTENT_X * MAX_AREA_EXTENT_Y];
} area_data;

struct vertex_t {
	vec3 position;
	vec2 tex_coord;
};

layout(std140, set = 0, binding = 1) writeonly buffer vertex_data_t {
	vertex_t vertices[MAX_AREA_EXTENT_X * MAX_AREA_EXTENT_Y * NUM_VERTICES_PER_ROOM];
} vertex_data;

layout(std140, set = 0, binding = 2) writeonly buffer index_data_t {
	uint indices[MAX_AREA_EXTENT_X * MAX_AREA_EXTENT_Y * NUM_INDICES_PER_ROOM];
} index_data;

// Vectors for the positions of each vertex of each quad.
const vec3[4] positions = {
	vec3(-0.5, -0.5, 0.0),	// Top-left
	vec3(0.5, -0.5, 0.0),	// Top-right
	vec3(0.5, 0.5, 0.0),	// Bottom-right
	vec3(-0.5, 0.5, 0.0)	// Bottom-left
};

const vec2[4] tex_coords = {
	vec2(0.0, 0.0),	// Top-left
	vec2(1.0, 0.0),	// Top-right
	vec2(1.0, 1.0),	// Bottom-right
	vec2(0.0, 1.0)	// Bottom-left
};

void main() {

	mat3 scale_matrix;
	scale_matrix[0] = vec3(area_data.room_extent.x, 0.0, 0.0);
	scale_matrix[1] = vec3(0.0, area_data.room_extent.y, 0.0);
	scale_matrix[2] = vec3(0.0, 0.0, 1.0);

	mat3 translation_matrix;
	translation_matrix[0] = vec3(1.0, 0.0, 0.0);
	translation_matrix[1] = vec3(0.0, 1.0, 0.0);
	translation_matrix[2] = vec3(area_data.room_positions[gl_WorkGroupID.x], 1.0);

	const uint vertices_index = gl_WorkGroupID.x * NUM_VERTICES_PER_ROOM + gl_LocalInvocationID.x;
	vertex_data.vertices[vertices_index].position = translation_matrix * scale_matrix * positions[gl_LocalInvocationID.x];
	vertex_data.vertices[vertices_index].tex_coord = tex_coords[gl_LocalInvocationID.x];

	const uint indices_index = gl_WorkGroupID.x * NUM_INDICES_PER_ROOM;
	index_data.indices[indices_index + 0] = 0;
	index_data.indices[indices_index + 1] = 1;
	index_data.indices[indices_index + 2] = 2;
	index_data.indices[indices_index + 3] = 2;
	index_data.indices[indices_index + 4] = 3;
	index_data.indices[indices_index + 5] = 0;
}
