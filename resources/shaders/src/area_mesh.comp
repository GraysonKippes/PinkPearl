#version 460
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_16bit_storage : require

// Generates a quad for each room in an area.
// Let gl_NumWorkGroups.x equal the number of rooms in the area whose mesh is being generated.
// Let gl_WorkGroupID.x equal the index of the room currently being processed.

#define MAX_AREA_EXTENT_X 	32
#define MAX_AREA_EXTENT_Y 	32
#define MAX_AREA_EXTENT		MAX_AREA_EXTENT_X * MAX_AREA_EXTENT_Y
#define NUM_VERTICES_PER_ROOM	4
#define NUM_INDICES_PER_ROOM	6

layout(local_size_x = NUM_VERTICES_PER_ROOM) in;
layout(local_size_y = 1) in;
layout(local_size_z = 1) in;



layout(scalar, set = 0, binding = 0) readonly uniform area_data_t {
	uvec2 room_extent;
	ivec2 room_positions[MAX_AREA_EXTENT];
} area_data;



struct vertex_t {
	vec3 position;
	vec2 tex_coord;
	vec3 color;
};

layout(scalar, set = 0, binding = 1) writeonly buffer vertex_data_t {
	vertex_t vertices[MAX_AREA_EXTENT * NUM_VERTICES_PER_ROOM];
} vertex_data;

layout(scalar, set = 0, binding = 2) writeonly buffer index_data_t {
	uint16_t indices[MAX_AREA_EXTENT * NUM_INDICES_PER_ROOM];
} index_data;



// Vectors for the positions of each vertex of each quad.
const vec4[4] positions = {
	vec4(-0.5, -0.5,  0.0,  1.0),	// Top-left
	vec4( 0.5, -0.5,  0.0,  1.0),	// Top-right
	vec4( 0.5,  0.5,  0.0,  1.0),	// Bottom-right
	vec4(-0.5,  0.5,  0.0,  1.0)	// Bottom-left
};

const vec2[4] tex_coords = {
	vec2(0.0, 0.0),	// Top-left
	vec2(1.0, 0.0),	// Top-right
	vec2(1.0, 1.0),	// Bottom-right
	vec2(0.0, 1.0)	// Bottom-left
};

const mat4 invert_y_matrix = mat4(
	1.0, 0.0, 0.0, 0.0,
	0.0, -1.0, 0.0, 0.0,
	0.0, 0.0, 1.0, 0.0,
	0.0, 0.0, 0.0, 1.0
);



void main() {

	const uint room_id = gl_WorkGroupID.x;
	const uint vertex_id = gl_LocalInvocationID.x;

	const mat4 scale_matrix = mat4(
		area_data.room_extent.x, 0.0, 0.0, 0.0,
		0.0, area_data.room_extent.y, 0.0, 0.0,
		0.0, 0.0, 1.0, 0.0,
		0.0, 0.0, 0.0, 1.0
	);

	mat4 translation_matrix = mat4(1.0);
	translation_matrix[3].xy = vec2(area_data.room_positions[room_id]);
	translation_matrix[3].y *= -1.0;

	const uint vertices_index = room_id * NUM_VERTICES_PER_ROOM + vertex_id;
	vec4 vertex_position = scale_matrix * translation_matrix * positions[vertex_id];
	vertex_data.vertices[vertices_index].position = vertex_position.xyz;
	vertex_data.vertices[vertices_index].tex_coord = tex_coords[vertex_id];
	vertex_data.vertices[vertices_index].color = vec3(1.0);

	const uint indices_index = gl_WorkGroupID.x * NUM_INDICES_PER_ROOM;
	index_data.indices[indices_index + 0] = uint16_t(0);
	index_data.indices[indices_index + 1] = uint16_t(1);
	index_data.indices[indices_index + 2] = uint16_t(2);
	index_data.indices[indices_index + 3] = uint16_t(2);
	index_data.indices[indices_index + 4] = uint16_t(3);
	index_data.indices[indices_index + 5] = uint16_t(0);
}
