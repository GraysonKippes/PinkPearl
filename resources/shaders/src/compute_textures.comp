#version 450

// Processes:
// Ambient lighting
// Dynamic lighting

#define MAX_SIZE_X 64	// Model slots
#define MAX_SIZE_Y 1
#define MAX_SIZE_Z 1

layout(local_size_x = MAX_SIZE_X) in;
layout(local_size_y = MAX_SIZE_Y) in;

struct point_light_t {
	vec3 m_position;
	vec3 m_color;
	float m_intensity;
};

layout(set = 0, binding = 0) readonly uniform data_t {

	uint m_num_models;
	vec3 m_positions[MAX_SIZE_X];

	vec3 m_ambient_color;
	float m_ambient_intensity;

	uint m_num_point_lights;
	point_light_t m_point_lights[16];

} data;

layout(set = 0, binding = 1, rgba32f) uniform readonly image2D input_image;

layout(set = 0, binding = 2, rgba32f) uniform writeonly image2D output_image;

void main() {
	
	uint g_x = gl_GlobalInvocationID.x;

	if (g_x < data.m_num_models) {

		ivec2 image_size = imageSize(input_image);
		ivec2 image_coord = ivec2(0, 0);

		for (; image_coord.y < image_size.y; ++image_coord.y) {
			for (; image_coord.x < image_size.x; ++image_coord.x) {
				vec4 image_data = imageLoad(input_image, image_coord);
				imageStore(output_image, image_coord, image_data);
			}
		}
	}
}
