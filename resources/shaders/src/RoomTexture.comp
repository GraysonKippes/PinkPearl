#version 460
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_shader_16bit_storage : require

// Generates the base texture for the room.
// Takes the tilemap slot for each tile in the room and copies it to the appropriate spot in the final texture.
// Tiles are split up across workgroups, as the number of tiles is variable.
//	The x-dimension represents room width.
//	The y-dimension represents room height.
//	The z-dimension represents texture layer.
//	gl_WorkGroupID = (0, 0) indicates the top-left corner.
// Texels within each tilemap slot are split up across local groups, as the dimensions are fixed (16x16).

#define TILE_TEXEL_LENGTH 16

const int tileTexelLength = TILE_TEXEL_LENGTH;

layout(local_size_x = TILE_TEXEL_LENGTH) in;
layout(local_size_y = TILE_TEXEL_LENGTH) in;
layout(local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler samplers[];

layout(set = 0, binding = 1) uniform texture2DArray sampledImages[];

layout(set = 0, binding = 2, rgba8ui) uniform uimage2DArray storageImages[];

layout(set = 0, binding = 3, scalar) uniform TileDataBuffers {
	// length = room width * room height
	// use workgroup ID index into this array
	uint tileIndices[2][640];
} tileDataBuffers[];

layout(push_constant) uniform PushConstants {
	uint tilemapImageIndex;
	uint transferImageIndex;
	uint tileDataBufferIndex;
} pushConstants;

void main() {

	// Row-major computation order.

	const int tileIndex = int(tileDataBuffers[pushConstants.tileDataBufferIndex].tileIndices[gl_WorkGroupID.z][gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x]);
	const ivec3 tilemapTextureSize = imageSize(storageImages[pushConstants.tilemapImageIndex]);
	const ivec3 tilemapTileSize = tilemapTextureSize / tileTexelLength;
	const ivec3 tileCoordinates = ivec3(tileIndex % tilemapTileSize.x, tileIndex / tilemapTileSize.x, 0);
	
	const ivec3 inTexelCoordinates = tileCoordinates * tileTexelLength + ivec3(gl_LocalInvocationID.xy, 0);
	const uvec4 texel = imageLoad(storageImages[pushConstants.tilemapImageIndex], inTexelCoordinates);

	const ivec3 outputCoordinates = ivec3(gl_WorkGroupID.xy * 16 + gl_LocalInvocationID.xy, gl_WorkGroupID.z);
	imageStore(storageImages[pushConstants.transferImageIndex], outputCoordinates, texel);
}
